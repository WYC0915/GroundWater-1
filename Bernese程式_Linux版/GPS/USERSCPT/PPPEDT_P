package PPPEDT_P;
@ISA = ("RUNBPE");
# ============================================================================
#
# Name    :  PPPEDT_P
#
# Purpose :  Precise-point-positioning (PPP) analysis (parallel mode):
#            - Predefined screening levels are considered.
#            - Generation of result and NEQ files for each station.
#
# PARAMs  :  PARAM1 - temporary file for parallel processing
#
# Author  :  M. Meindl, U. Hugentobler, S. Schaer
# Created :  23-Jul-2003
#
# Changes :  11-Aug-2011 RD: Updated for version 5.2
#
# ============================================================================
use strict;

use File::Copy;

use lib $ENV{BPE};
use bpe_util qw(prtMess getWarn replaceSel setUserVar prtBPEfile);

sub run {
  my $bpe = shift;

# Get variables
# -------------
  my ($ssss,
      $param1, $subPid, $clu, $obstyp,
      $dirOut, $dirSum, $dirRes,
      $extOut, $extSum, $extRes) =
  $bpe->getKeys(
      '$S+0',
      'PARAM1', 'SUB_PID', 'V_CLU', 'V_OBSTYP',
      'DIR_OUT', 'DIR_SUM', 'DIR_RES' ,
      'EXT_OUT', 'EXT_SUM', 'EXT_RES');

# Initialize flags
# ----------------
  my $fl  = 'F';
  my $est = 1;

# Set cluster number and input files
# ----------------------------------
  my $cluster = $clu eq "" ? "$ssss$param1" : "$ssss$subPid";
  my $ffff    = $clu eq "" ? $param1        : "____";

  setUserVar($bpe,"CLUSTER",$cluster,"FFFF",$ffff,"CCC",$subPid,"FL",$fl);

  if ($clu eq "") {
    prtMess($bpe,"PROCESSING FILE $param1$ssss");

    $bpe->putKey("$ENV{U}/PAN/GPSEST.INP","PZFILES","$param1$ssss") unless uc($obstyp) eq "CODE";
    $bpe->putKey("$ENV{U}/PAN/GPSEST.INP","CZFILES","$param1$ssss") unless uc($obstyp) eq "PHASE";
    $bpe->putKey("$ENV{U}/PAN/SATMRK.INP","PZHFIL","$param1$ssss") }
  else {
    replaceSel($bpe,"GPSEST","PZFILES",$param1) unless uc($obstyp) eq "CODE";
    replaceSel($bpe,"GPSEST","CZFILES",$param1) unless uc($obstyp) eq "PHASE";
    replaceSel($bpe,"SATMRK","PZHFIL",$param1) }

# Specify thresholds for screening loops
# ---------------------------------------
  my @phaRes = ( 600, 60, 6, 0.6, 0.06, 0.006 );
  my @codRes = ( 600, 60, 6, 0.6, 0.06, 0.006 );

  my $nEdt = @phaRes;

# Data screening loop
# -------------------
  for (my $iEdt=1; $iEdt<=$nEdt; $iEdt++) {
    prtMess($bpe,"SCREENING LOOP $iEdt");

# Set current screening thresholds
# --------------------------------
    my $phaMax = shift @phaRes;
    $bpe->putKey("$ENV{U}/PAN/RESRMS.INP","BIGRES", $phaMax);
    my $codMax = shift @codRes;
    $bpe->putKey("$ENV{U}/PAN/RESRMS.INP","BIGRES2",$codMax);
    prtMess($bpe,"LEVEL: $phaMax $codMax");

# Compute relevant parameters and save residuals
# ----------------------------------------------
    my $PGMNAM = "GPSEST";
    $bpe->RUN_PGMS($PGMNAM) if $est;

    copy ("${dirOut}EDF${cluster}.${extOut}",
          "${dirOut}EDL${cluster}.${extOut}") if $iEdt == 1;
    copy ("${dirRes}EDF${cluster}.${extRes}",
          "${dirRes}EDL${cluster}.${extRes}") if $iEdt == 1;

# Screen residuals
# ----------------
    $PGMNAM = "RESRMS";
    $bpe->RUN_PGMS($PGMNAM);

# Check whether edit requests reported
# ------------------------------------
    $est = 1;
    open (INP,"$$bpe{SYSOUT}");
    while (<INP>) { $est = 0 if /NO EDIT REQUESTS/ }
    close (INP);

    $PGMNAM = "SATMRK";
    $bpe->RUN_PGMS($PGMNAM) if $est;

# Redefine loop variable
# ----------------------
    $fl = 'L';
    setUserVar($bpe,"FL",$fl) if $iEdt == 1;
  }

# Do additional GPSEST run in case of open edit requests
# ------------------------------------------------------
  my $PGMNAM = "GPSEST";
  $bpe->RUN_PGMS($PGMNAM) if $est;

# Generate station-specific SINEX file
# ------------------------------------
  $PGMNAM = "ADDNEQ2";
  $bpe->RUN_PGMS($PGMNAM);

# Extract warning/error messages from protocol file
# -------------------------------------------------
  my $sumFil = "${dirSum}WRN${cluster}.${extSum}";
  getWarn($bpe,$sumFil);

# Print processed stations BPE file
# ---------------------------------
  prtBPEfile($param1,0) if ($clu ne "");

}
