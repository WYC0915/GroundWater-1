      MODULE s_CHKNOI
      CONTAINS

C*
      SUBROUTINE CHKNOI(RMSMAX,MINOBS,NOBS  ,NBAD,  LINTIM,LINOBS,
     1                  LINFLG,ARCOFF,ARCRMS,NSLIP ,SLPTIM,SLPCYC,
     2                  WAVELN,ICOR  )
CC
CC NAME       :  CHKNOI
CC
CC PURPOSE    :  CHECKS THE NOISE OF AN L3-P3 OBSERVATION ARC.
CC
CC PARAMETERS :
CC        IN  :  RMSMAX : MAXIMUM RMS OF OBSERVATION ARC      I*4
CC            :  MINOBS : MINIMUM NUMBER OF OBS. IN ARC       I*4
CC            :  NOBS   : NUMBER OF OBSERVATIONS IN ARC       I*4
CC            :  NBAD   : NUMBER OF BAD OBSERVATIONS IN ARC   I*4
CC            :  LINTIM : ARRAY WITH TIME VALUES (HOURS)      R*8(*)
CC            :  LINOBS : ARRAY WITH OBSERVATIONS             R*8(*)
CC            :  LINFLG : ARRAY WITH OBSERVATION FLAGS       CH*1(*)
CC                        BIT=0: OUTLIER
CC                        BIT=1: NEW AMBIGUITY
CC        OUT :  ARCOFF : PHASE-CODE DIFFERENCE (M. OR CYCL)  R*8
CC               ARCRMS : PHASE-CODE RMS        (M. OR CYCL)  R*8
CC               NSLIP  : NUMBER OF CYCLE SLIPS               I*4
CC               SLPTIM : INDEX TIME OF THE CYCLE SLIP        I*4(*)
CC               SLPCYC : SIZE OF THE CYCLE SLIPS             R*8(*)
CC               WAVELN : WAVE LENGTH OF THE CYCLES           R*8
CC               ICOR   : CORRECT FOR CYCLE SLIPS OR NOT      I*4
CC
CC REMARKS    :  ---
CC
CC AUTHOR     :  T.A. SPRINGER
CC
CC VERSION    :  4.1
CC
CC CREATED    :  22-JUL-96
CC
CC CHANGES    :  30-MAR-98 : TS: INITIALIZE SLPOLD
CC               21-JUN-05 : MM: COMLFNUM.inc REMOVED, m_bern ADDED
CC               23-JUN-05 : MM: IMPLICIT NONE AND DECLARATIONS ADDED
CC               12-OCT-07 : RD: MAXFLG IS NOT NECESSARY ANYMORE IN F90
CC
CC COPYRIGHT  :  ASTRONOMICAL INSTITUTE
CC      1996     UNIVERSITY OF BERN
CC               SWITZERLAND
C*
      USE m_bern
      USE f_tstflg
      USE s_clrflg
      USE s_setflg
      USE s_exitrc
      USE s_offset
      IMPLICIT NONE
C
C DECLARATIONS INSTEAD OF IMPLICIT
C --------------------------------
      INTEGER*4 I     , ICOR  , ISLP  , ISTART, MAXFLG, MINOBS, NBAD  ,
     1          NOBS  , NSLIP
C
      REAL*8    ARCOFF, ARCRMS, BADPRC, DIFF  , RMSMAX, SLPLVL, SLPOLD,
     1          SLPOUT, WAVELN
C
CCC       IMPLICIT  REAL*8(A-H,O-Z)
CCC      PARAMETER (MAXFLG=50000)
C
      REAL*8      LINTIM(*),LINOBS(*)
      REAL*8      SLPCYC(*)
C
      INTEGER*4   SLPTIM(*)
C
      CHARACTER*1 LINFLG(*),TMPFLG(NOBS)
C
C      IF (NOBS.GT.MAXFLG) THEN
C        WRITE(LFNERR,901)NOBS,MAXFLG
C901     FORMAT(/,' *** SR CHKNOI: MAXFLG EXCEEDED ',/,
C     1                      16X,' NUMBER OF OBS  : ',I8,/,
C     2                      16X,' MAXIMUM NUMBER : ',I8,/)
C        CALL EXITRC(2)
C      ENDIF
C
C APPLY ALL CYCLE SLIPS AND CHECK ALL FLAGS
C -----------------------------------------
      DO 10 ISLP=1,NSLIP
        ISTART=SLPTIM(ISLP)
        DO 20 I=ISTART,NOBS
          IF (.NOT.TSTFLG(LINFLG(I),0).AND.ICOR.EQ.1) THEN
            LINOBS(I)=LINOBS(I)-SLPCYC(ISLP)*WAVELN
          ENDIF
20      CONTINUE
10    CONTINUE
C
C GET THE INITIAL ARC-OFFSET
C --------------------------
      CALL OFFSET(LINTIM,LINOBS,LINFLG,NOBS,ARCOFF,ARCRMS)
      IF (ARCRMS.LE.RMSMAX) GOTO 200
C
C COPY THE OBSERVATION FLAGS
C --------------------------
      DO 30 I=1,NOBS
        TMPFLG(I)=LINFLG(I)
30    CONTINUE
C
C SCREEN FOR OUTLIERS UNTIL "ARCRMS" IS LOWER THEN MAXRMS
C -------------------------------------------------------
      SLPOLD=9D20
      SLPOUT=3D0*ARCRMS
      SLPLVL=SLPOUT
100   NBAD=0
      DO 110 I=1,NOBS
        DIFF=DABS(LINOBS(I)-ARCOFF)
        IF (DIFF.GT.SLPLVL) THEN
          NBAD=NBAD+1
          CALL SETFLG(TMPFLG(I),0)
        ELSE
          CALL CLRFLG(TMPFLG(I),0)
        ENDIF
110   CONTINUE
      IF (NOBS-NBAD.LT.MINOBS) THEN
        NBAD=NOBS
        GOTO 1000
      ENDIF
      CALL OFFSET(LINTIM,LINOBS,TMPFLG,NOBS,ARCOFF,ARCRMS)
C
C CHECK RMS TO SEE IF ANOTHER ITERATION IS NECESSARY
C (PREVENT ENDLESS LOOP WITH SLPOLD)
C --------------------------------------------
      IF (ARCRMS.GE.RMSMAX) THEN
        SLPLVL=DMIN1(SLPOUT,ARCRMS*4D0)
        IF (SLPLVL.GE.SLPOLD) SLPLVL=SLPOLD/2D0
        SLPOLD=SLPLVL
        GOTO 100
      ELSE
        SLPOLD=SLPLVL
        SLPLVL=DMIN1(SLPOLD,ARCRMS*4D0)
      ENDIF
C
C FINAL CHECK
C -----------
      NBAD=0
      DO 120 I=1,NOBS
        DIFF=DABS(LINOBS(I)-ARCOFF)
        IF (DIFF.GT.SLPLVL .OR. TSTFLG(LINFLG(I),0)) THEN
          NBAD=NBAD+1
          CALL SETFLG(LINFLG(I),0)
          LINOBS(I)=1D0
        ENDIF
120   CONTINUE
      IF (NOBS-NBAD.LT.MINOBS) THEN
        NBAD=NOBS
        GOTO 1000
      ENDIF
      CALL OFFSET(LINTIM,LINOBS,LINFLG,NOBS,ARCOFF,ARCRMS)
C
C REMOVE OFFSET FOR LATER PLOTTING
C --------------------------------
200   CONTINUE
      DO 210 I=1,NOBS
        IF (.NOT.TSTFLG(LINFLG(I),0)) THEN
          LINOBS(I)=LINOBS(I)-ARCOFF
        ENDIF
210   CONTINUE
C
C CHECK PERCENTAGE OF BAD POINTS
C ------------------------------
1000  CONTINUE
      BADPRC=NBAD*1D2/NOBS
      IF (BADPRC.GE.75D0) NBAD=NOBS
      IF (NOBS-NBAD.LT.MINOBS) THEN
        NBAD=NOBS
        ARCOFF=0D0
        ARCRMS=0D0
        DO 1010 I=1,NOBS
          CALL SETFLG(LINFLG(I),0)
          LINOBS(I)=0D0
1010    CONTINUE
      ENDIF
C
      RETURN
      END SUBROUTINE

      END MODULE
