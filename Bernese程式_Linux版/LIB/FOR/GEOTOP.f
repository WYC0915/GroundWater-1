      MODULE s_GEOTOP
      CONTAINS

C*
      SUBROUTINE GEOTOP(LAT0,LONG0,X0,X,DXTOP,POLAR)
CC
CC NAME       :  GEOTOP
CC
CC PURPOSE    : GIVEN TWO GEOCENTRIC VECTORS X0, X, FORM
CC              DIFFERENCE VECTOR X - X0, SUBSEQUENTLY TRANSFORM
CC              THIS VECTOR INTO THE TOPOCENTRIC SYSTEM *), STORE
CC              THE CARTESIAN COORDINATES OF THE TRANSFORMED VECTOR
CC              IN DXTOP, THE POLAR COORDINATES IN POLAR.
CC              *) LATITUDE LAT0, LONGITUDE LONG0
CC
CC PARAMETERS :
CC         IN : LAT0, LONG0: LATITUDE, LONGITUDE OF REF POINT R*8
CC              X0(I),I=1,2,3: GEOC. CART. COORDINATES OF     R*8
CC                      REF. POINT
CC              X(I),I=1,2,3: GEOC. CART. COORDINATES OF
CC                      SECOND POINT
CC
CC        OUT : DXTOP(I),I=1,2,3: CART. COORD. OF DIFFERENCE R*8
CC                      VECTOR IN TOPOCENTRIC SYSTEM
CC              POLAR(I),I=1,2,3: AZIMUTH, ELEVATION, LENGTH R*8
CC                      OF THE SAME VECTOR
CC
CC REMARKS    :  ---
CC
CC AUTHOR     :  G.BEUTLER, M.ROTHACHER
CC
CC VERSION    :  3.4  (JAN 93)
CC
CC CREATED    :  88/02/26 07:52
CC
CC CHANGES    :  23-JUN-05 : MM: IMPLICIT NONE AND DECLARATIONS ADDED
CC
CC COPYRIGHT  :  ASTRONOMICAL INSTITUTE
CC      1988     UNIVERSITY OF BERN
CC               SWITZERLAND
CC
C*
C
C DECLARATIONS
      USE d_const, ONLY: PI
      USE s_ddreh
      USE s_dmlmav
      IMPLICIT NONE
C
C DECLARATIONS INSTEAD OF IMPLICIT
C --------------------------------
      INTEGER*4 I
C
CCC       IMPLICIT REAL*8 (A-H,O-Z)
CCC       IMPLICIT INTEGER*4 (I-N)
      REAL*8 LAT0,LONG0,X0(*),X(*),DXTOP(*),POLAR(*)
      REAL*8 R2(3,3),R3(3,3)
C
C DEFINE ROTATION MATRICES
      CALL DDREH(2,-(PI/2-LAT0),R2)
      CALL DDREH(3,-(PI-LONG0),R3)
C
C DEFINE DIFFERENCE VECTOR
      DO 10 I=1,3
        DXTOP(I)=X(I)-X0(I)
10    CONTINUE
C
C TRANSFORM VECTOR INTO TOPOCENTRIC SYSTEM
      CALL DMLMAV(DXTOP,R3,DXTOP)
      CALL DMLMAV(DXTOP,R2,DXTOP)
C
C TRANSFORM INTO A LEFT HAND SYSTEM
      DXTOP(2)=-DXTOP(2)
C
C COMPUTE POLAR COORDINATES
      POLAR(3)=DSQRT(DXTOP(1)**2+DXTOP(2)**2+DXTOP(3)**2)
      IF(POLAR(3).NE.0.D0)THEN
        POLAR(1)=DATAN2(DXTOP(2),DXTOP(1))
        POLAR(2)=DATAN(DXTOP(3)/DSQRT(DXTOP(1)**2+DXTOP(2)**2))
      ELSE
        POLAR(1)=0.D0
        POLAR(2)=0.D0
      END IF
      RETURN
      END SUBROUTINE

      END MODULE
